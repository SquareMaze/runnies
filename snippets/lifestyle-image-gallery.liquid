{%- comment -%}
  Lifestyle Image Gallery for RUNNIES Sunglasses
  Enhanced product image display with lifestyle context and interactive features
  
  Parameters:
  - product {Object} - Product object
  - section {Object} - Section object
  - current_variant {Object} - Current selected variant
  
  Usage:
  {% render 'lifestyle-image-gallery', product: product, section: section, current_variant: current_variant %}
{%- endcomment -%}

{%- liquid
  assign lifestyle_images = product.metafields.custom.lifestyle_images.value
  assign has_lifestyle_images = false
  
  if lifestyle_images != blank and lifestyle_images.size > 0
    assign has_lifestyle_images = true
  endif
  
  # Get regular product images
  assign product_images = product.media | where: 'media_type', 'image'
  assign total_images = product_images.size
  
  if has_lifestyle_images
    assign total_images = total_images | plus: lifestyle_images.size
  endif
-%}

<div class="lifestyle-gallery" data-gallery-id="{{ product.id }}-{{ section.id }}">
  {%- if has_lifestyle_images -%}
  <div class="gallery-tabs">
    <button type="button" class="gallery-tab active" data-tab="product">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
        <circle cx="9" cy="9" r="2"/>
        <path d="M21 15l-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/>
      </svg>
      Product Photos
    </button>
    <button type="button" class="gallery-tab" data-tab="lifestyle">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
        <circle cx="12" cy="7" r="4"/>
      </svg>
      Lifestyle
    </button>
  </div>
  {%- endif -%}
  
  <div class="gallery-content">
    <!-- Product Images Tab -->
    <div class="gallery-panel active" data-panel="product">
      <div class="main-image-container">
        {%- for media in product_images -%}
          <div class="main-image{% if forloop.first %} active{% endif %}" data-image-id="{{ media.id }}">
            {%- if media.media_type == 'image' -%}
              <img src="{{ media.preview_image | img_url: '1200x' }}" 
                   alt="{{ media.alt | escape | default: product.title }}" 
                   loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                   class="product-image">
              
              {%- if media.alt != blank -%}
                <div class="image-caption">
                  <span class="caption-text">{{ media.alt }}</span>
                </div>
              {%- endif -%}
            {%- endif -%}
          </div>
        {%- endfor -%}
        
        <!-- Image Navigation -->
        {%- if product_images.size > 1 -%}
        <div class="image-nav">
          <button type="button" class="nav-btn prev" aria-label="Previous image">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M15 18l-6-6 6-6"/>
            </svg>
          </button>
          <button type="button" class="nav-btn next" aria-label="Next image">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 18l6-6-6-6"/>
            </svg>
          </button>
        </div>
        {%- endif -%}
        
        <!-- Zoom functionality -->
        <div class="zoom-indicator">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"/>
            <path d="M21 21l-4.35-4.35"/>
            <line x1="11" y1="8" x2="11" y2="14"/>
            <line x1="8" y1="11" x2="14" y2="11"/>
          </svg>
          <span>Click to zoom</span>
        </div>
      </div>
      
      <!-- Thumbnail Navigation -->
      {%- if product_images.size > 1 -%}
      <div class="thumbnail-container">
        <div class="thumbnail-scroll">
          {%- for media in product_images -%}
            <button type="button" class="thumbnail{% if forloop.first %} active{% endif %}" 
                    data-image-id="{{ media.id }}" 
                    aria-label="View image {{ forloop.index }}">
              <img src="{{ media.preview_image | img_url: '150x' }}" 
                   alt="{{ media.alt | escape | default: product.title }}"
                   loading="lazy">
            </button>
          {%- endfor -%}
        </div>
      </div>
      {%- endif -%}
    </div>
    
    <!-- Lifestyle Images Tab -->
    {%- if has_lifestyle_images -%}
    <div class="gallery-panel" data-panel="lifestyle">
      <div class="lifestyle-grid">
        {%- for lifestyle_image in lifestyle_images -%}
          <div class="lifestyle-item">
            <img src="{{ lifestyle_image.preview_image | img_url: '800x' }}" 
                 alt="{{ lifestyle_image.alt | escape | default: 'Lifestyle image' }}"
                 loading="lazy"
                 class="lifestyle-image">
            
            {%- if lifestyle_image.alt != blank -%}
              <div class="lifestyle-caption">
                <span class="caption-text">{{ lifestyle_image.alt }}</span>
              </div>
            {%- endif -%}
          </div>
        {%- endfor -%}
      </div>
    </div>
    {%- endif -%}
  </div>
  
  <!-- Image Counter -->
  <div class="image-counter">
    <span class="current-image">1</span> / <span class="total-images">{{ total_images }}</span>
  </div>
</div>

<style>
.lifestyle-gallery {
  position: relative;
  margin-bottom: 2rem;
}

.gallery-tabs {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
  border-bottom: 1px solid #e9ecef;
}

.gallery-tab {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1rem;
  background: none;
  border: none;
  border-bottom: 2px solid transparent;
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  color: #6c757d;
  transition: all 0.2s ease;
}

.gallery-tab:hover {
  color: #232323;
}

.gallery-tab.active {
  color: #ffeb01;
  border-bottom-color: #ffeb01;
}

.gallery-content {
  position: relative;
}

.gallery-panel {
  display: none;
}

.gallery-panel.active {
  display: block;
}

.main-image-container {
  position: relative;
  margin-bottom: 1rem;
  border-radius: 12px;
  overflow: hidden;
  background: #f8f9fa;
}

.main-image {
  display: none;
  position: relative;
}

.main-image.active {
  display: block;
}

.product-image {
  width: 100%;
  height: auto;
  display: block;
  cursor: zoom-in;
  transition: transform 0.3s ease;
}

.product-image:hover {
  transform: scale(1.02);
}

.image-caption {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
  color: white;
  padding: 1rem;
  font-size: 0.875rem;
}

.image-nav {
  position: absolute;
  top: 50%;
  left: 0;
  right: 0;
  display: flex;
  justify-content: space-between;
  padding: 0 1rem;
  transform: translateY(-50%);
  pointer-events: none;
}

.nav-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  background: rgba(255, 255, 255, 0.9);
  border: none;
  border-radius: 50%;
  cursor: pointer;
  color: #232323;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
  pointer-events: all;
}

.nav-btn:hover {
  background: white;
  transform: scale(1.1);
}

.nav-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.zoom-indicator {
  position: absolute;
  top: 1rem;
  right: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 0.5rem 0.75rem;
  border-radius: 6px;
  font-size: 0.75rem;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.main-image-container:hover .zoom-indicator {
  opacity: 1;
}

.thumbnail-container {
  overflow-x: auto;
  padding: 0.5rem 0;
}

.thumbnail-scroll {
  display: flex;
  gap: 0.5rem;
  padding: 0 0.5rem;
}

.thumbnail {
  flex-shrink: 0;
  width: 60px;
  height: 60px;
  border: 2px solid transparent;
  border-radius: 8px;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.2s ease;
  background: none;
  padding: 0;
}

.thumbnail:hover {
  border-color: #ffeb01;
}

.thumbnail.active {
  border-color: #ffeb01;
  box-shadow: 0 0 0 2px rgba(255, 235, 1, 0.3);
}

.thumbnail img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.lifestyle-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1rem;
}

.lifestyle-item {
  position: relative;
  border-radius: 12px;
  overflow: hidden;
  background: #f8f9fa;
}

.lifestyle-image {
  width: 100%;
  height: auto;
  display: block;
  transition: transform 0.3s ease;
}

.lifestyle-item:hover .lifestyle-image {
  transform: scale(1.05);
}

.lifestyle-caption {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
  color: white;
  padding: 1rem;
  font-size: 0.875rem;
}

.image-counter {
  position: absolute;
  top: 1rem;
  left: 1rem;
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 0.5rem 0.75rem;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 500;
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .gallery-tabs {
    margin-bottom: 0.75rem;
  }
  
  .gallery-tab {
    padding: 0.5rem 0.75rem;
    font-size: 0.8rem;
  }
  
  .main-image-container {
    margin-bottom: 0.75rem;
  }
  
  .image-nav {
    padding: 0 0.5rem;
  }
  
  .nav-btn {
    width: 32px;
    height: 32px;
  }
  
  .thumbnail {
    width: 50px;
    height: 50px;
  }
  
  .lifestyle-grid {
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }
  
  .zoom-indicator,
  .image-counter {
    font-size: 0.7rem;
    padding: 0.375rem 0.5rem;
  }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
  .product-image,
  .lifestyle-image,
  .nav-btn {
    transition: none;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const galleries = document.querySelectorAll('.lifestyle-gallery');
  
  galleries.forEach(gallery => {
    const tabs = gallery.querySelectorAll('.gallery-tab');
    const panels = gallery.querySelectorAll('.gallery-panel');
    const mainImages = gallery.querySelectorAll('.main-image');
    const thumbnails = gallery.querySelectorAll('.thumbnail');
    const prevBtn = gallery.querySelector('.nav-btn.prev');
    const nextBtn = gallery.querySelector('.nav-btn.next');
    const currentImageSpan = gallery.querySelector('.current-image');
    const totalImagesSpan = gallery.querySelector('.total-images');
    
    let currentImageIndex = 0;
    
    // Tab functionality
    tabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const targetTab = this.getAttribute('data-tab');
        
        // Update active tab
        tabs.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        
        // Update active panel
        panels.forEach(panel => {
          panel.classList.remove('active');
          if (panel.getAttribute('data-panel') === targetTab) {
            panel.classList.add('active');
          }
        });
      });
    });
    
    // Thumbnail navigation
    thumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener('click', function() {
        const imageId = this.getAttribute('data-image-id');
        
        // Update active thumbnail
        thumbnails.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        
        // Update active image
        mainImages.forEach(img => {
          img.classList.remove('active');
          if (img.getAttribute('data-image-id') === imageId) {
            img.classList.add('active');
            currentImageIndex = index;
            updateImageCounter();
            updateNavButtons();
          }
        });
      });
    });
    
    // Navigation buttons
    if (prevBtn && nextBtn) {
      prevBtn.addEventListener('click', function() {
        if (currentImageIndex > 0) {
          currentImageIndex--;
          showImage(currentImageIndex);
        }
      });
      
      nextBtn.addEventListener('click', function() {
        if (currentImageIndex < mainImages.length - 1) {
          currentImageIndex++;
          showImage(currentImageIndex);
        }
      });
    }
    
    // Keyboard navigation
    gallery.addEventListener('keydown', function(e) {
      if (e.key === 'ArrowLeft' && currentImageIndex > 0) {
        currentImageIndex--;
        showImage(currentImageIndex);
      } else if (e.key === 'ArrowRight' && currentImageIndex < mainImages.length - 1) {
        currentImageIndex++;
        showImage(currentImageIndex);
      }
    });
    
    // Image zoom functionality
    const productImages = gallery.querySelectorAll('.product-image');
    productImages.forEach(img => {
      img.addEventListener('click', function() {
        // Create zoom modal
        createZoomModal(this.src, this.alt);
      });
    });
    
    function showImage(index) {
      // Update main images
      mainImages.forEach((img, i) => {
        img.classList.toggle('active', i === index);
      });
      
      // Update thumbnails
      thumbnails.forEach((thumb, i) => {
        thumb.classList.toggle('active', i === index);
      });
      
      currentImageIndex = index;
      updateImageCounter();
      updateNavButtons();
    }
    
    function updateImageCounter() {
      if (currentImageSpan) {
        currentImageSpan.textContent = currentImageIndex + 1;
      }
    }
    
    function updateNavButtons() {
      if (prevBtn && nextBtn) {
        prevBtn.disabled = currentImageIndex === 0;
        nextBtn.disabled = currentImageIndex === mainImages.length - 1;
      }
    }
    
    function createZoomModal(src, alt) {
      // Remove existing modal
      const existingModal = document.querySelector('.zoom-modal');
      if (existingModal) {
        existingModal.remove();
      }
      
      // Create modal
      const modal = document.createElement('div');
      modal.className = 'zoom-modal';
      modal.innerHTML = `
        <div class="zoom-backdrop"></div>
        <div class="zoom-container">
          <img src="${src}" alt="${alt}" class="zoom-image">
          <button class="zoom-close" aria-label="Close zoom">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="18" y1="6" x2="6" y2="18"/>
              <line x1="6" y1="6" x2="18" y2="18"/>
            </svg>
          </button>
        </div>
      `;
      
      // Add styles
      const style = document.createElement('style');
      style.textContent = `
        .zoom-modal {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          z-index: 10000;
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 2rem;
        }
        .zoom-backdrop {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.9);
          backdrop-filter: blur(4px);
        }
        .zoom-container {
          position: relative;
          max-width: 90vw;
          max-height: 90vh;
        }
        .zoom-image {
          max-width: 100%;
          max-height: 100%;
          object-fit: contain;
          border-radius: 8px;
        }
        .zoom-close {
          position: absolute;
          top: -2rem;
          right: -2rem;
          width: 40px;
          height: 40px;
          background: rgba(255, 255, 255, 0.9);
          border: none;
          border-radius: 50%;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          color: #232323;
        }
        .zoom-close:hover {
          background: white;
        }
      `;
      
      document.head.appendChild(style);
      document.body.appendChild(modal);
      
      // Close functionality
      const closeBtn = modal.querySelector('.zoom-close');
      const backdrop = modal.querySelector('.zoom-backdrop');
      
      function closeModal() {
        modal.remove();
        style.remove();
        document.body.style.overflow = '';
      }
      
      closeBtn.addEventListener('click', closeModal);
      backdrop.addEventListener('click', closeModal);
      
      // Escape key
      const handleEscape = (e) => {
        if (e.key === 'Escape') {
          closeModal();
          document.removeEventListener('keydown', handleEscape);
        }
      };
      document.addEventListener('keydown', handleEscape);
      
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    }
    
    // Initialize
    updateImageCounter();
    updateNavButtons();
  });
});
</script>
{%- endcomment -%}
